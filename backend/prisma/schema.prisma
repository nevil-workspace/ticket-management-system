// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  name            String
  profileImage    String?
  googleId        String?         @unique
  password        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  boards          Board[]         @relation("BoardMembers")
  assignedTickets Ticket[]        @relation("TicketAssignee")
  watchingTickets Ticket[]        @relation("TicketWatchers")
  comments        Comment[]
  TicketHistory   TicketHistory[]
}

model Board {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     User[]   @relation("BoardMembers")
  tickets     Ticket[]
  columns     Column[]
}

model Column {
  id        String   @id @default(uuid())
  name      String
  order     Int
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String          @id @default(uuid())
  title       String
  description String?
  priority    Priority        @default(MEDIUM)
  status      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  boardId     String
  board       Board           @relation(fields: [boardId], references: [id], onDelete: Cascade)
  columnId    String
  column      Column          @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?           @relation("TicketAssignee", fields: [assigneeId], references: [id])
  watchers    User[]          @relation("TicketWatchers")
  comments    Comment[]
  history     TicketHistory[]
}

model Comment {
  id            String          @id @default(uuid())
  content       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ticketId      String
  ticket        Ticket          @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  TicketHistory TicketHistory[]
}

model TicketHistory {
  id        String   @id @default(uuid())
  field     String
  oldValue  String?
  newValue  String?
  message   String?
  createdAt DateTime @default(now())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
